generator client {
  provider        = "prisma-client"
  previewFeatures = ["queryCompiler", "driverAdapters"]
  output          = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  username      String?   @unique
  password      String
  role          String?
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id             Int      @id @default(autoincrement())
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         Int
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    Int       @id @default(autoincrement())
  accountId             String
  providerId            String
  userId                Int
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         Int       @id @default(autoincrement())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Customer {
  id             Int       @id @default(autoincrement())
  name           String
  surname        String
  email          String    @unique
  company        String?
  country        String
  contact        String    @unique
  cargoAddress   String    @map("cargo_address")
  billingAddress String    @map("billing_address")
  ico            Int?      @unique
  dico           String?   @unique
  Orders         Order[]
  deletedAt      DateTime? @map("deleted_at")
  createdAt      DateTime  @default(now()) @map("created_at")

  @@map("customer")
}

model Order {
  id         Int         @id @default(autoincrement())
  total      Int
  notes      String
  customerId Int         @default(0) @map("customer_id")
  contact    Customer    @relation(fields: [customerId], references: [id], onDelete: SetDefault)
  statusId   Int         @default(1) @map("status_id")
  status     OrderStatus @relation(fields: [statusId], references: [id], onDelete: SetDefault)
  createdAt  DateTime    @default(now()) @map("created_at")
  deletedAt  DateTime?   @map("deleted_at")
  products   Product[]

  @@map("order")
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  quantity Int    @default(1)
  material String
  size     String
  Order    Order? @relation(fields: [orderId], references: [id])
  orderId  Int?   @map("order_id")

  @@map("product")
}

enum Status {
  DRAFT   @map("draft")
  PENDING @map("pending")
  PAID    @map("paid")

  @@map("status")
}

model OrderStatus {
  id        Int       @id @default(autoincrement())
  name      Status    @default(DRAFT)
  Order     Order[]
  deletedAt DateTime?

  @@map("order_status")
}
